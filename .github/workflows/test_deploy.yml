name: Test, Build, and Deploy to PyPI (Linux only)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .

      - name: Run Tests
        run: pytest tests/

  build:
    needs: test  # Ensure tests complete successfully before building
    if: github.event_name == 'release'
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build twine

      - name: Clean dist directory
        run: rm -rf dist

      - name: Build Package
        run: python -m build

      - name: List dist contents
        run: ls -R dist

      - name: Check for Artifacts
        run: |
          if [ ! "$(ls dist/*.whl dist/*.tar.gz)" ]; then
            echo "No artifacts found!"
            exit 1
          fi

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-artifacts
          path: dist/*.whl dist/*.tar.gz
          if-no-files-found: warn

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install twine
        run: |
          pip install --upgrade pip
          pip install twine
    
      - name: Download all artifacts to a specific directory
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create dist directory
        run: mkdir -p dist

      - name: Move files from subdirectories
        run: |
          for subdirectory in dist/*/; do
            dir_name=$(basename "$subdirectory")
            mv "$subdirectory"* dist/
            rm -r "$subdirectory"
            echo "Moved files from '$dir_name' to 'dist/'"
          done

      - name: Inspect wheel files
        run: |
          ls -R dist

      - name: Upload to PyPI using twine
        run: twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}