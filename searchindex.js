Search.setIndex({"alltitles": {"Contents:": [[3, null]], "Indices and tables": [[3, "indices-and-tables"]], "Module contents": [[0, "module-TFilterPy"], [1, "module-TFilterPy.state_estimation"], [2, "module-TFilterPy.utils"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"]], "Subpackages": [[0, "subpackages"]], "TFilterPy": [[4, null]], "TFilterPy package": [[0, null]], "TFilterPy.base_estimator module": [[0, "module-TFilterPy.base_estimator"]], "TFilterPy.state_estimation package": [[1, null]], "TFilterPy.state_estimation.linear_filters module": [[1, "module-TFilterPy.state_estimation.linear_filters"]], "TFilterPy.state_estimation.nonlinear_filters module": [[1, "module-TFilterPy.state_estimation.nonlinear_filters"]], "TFilterPy.state_estimation.particle_filters module": [[1, "module-TFilterPy.state_estimation.particle_filters"]], "TFilterPy.utils package": [[2, null]], "TFilterPy.utils.optimisation_utils module": [[2, "module-TFilterPy.utils.optimisation_utils"]], "Welcome to tfilterpy\u2019s documentation!": [[3, "welcome-to-tfilterpy-s-documentation"]], "tfilters documentation": [[3, null]]}, "docnames": ["TFilterPy", "TFilterPy.state_estimation", "TFilterPy.utils", "index", "modules"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["TFilterPy.rst", "TFilterPy.state_estimation.rst", "TFilterPy.utils.rst", "index.rst", "modules.rst"], "indexentries": {"baseestimator (class in tfilterpy.base_estimator)": [[0, "TFilterPy.base_estimator.BaseEstimator", false]], "daskkalmanfilter (class in tfilterpy)": [[0, "TFilterPy.DaskKalmanFilter", false]], "daskkalmanfilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter", false]], "daskkalmanfilter (class in tfilterpy.state_estimation.linear_filters)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter", false]], "dasknonlinearkalmanfilter (class in tfilterpy)": [[0, "TFilterPy.DaskNonLinearKalmanFilter", false]], "dasknonlinearkalmanfilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskNonLinearKalmanFilter", false]], "dasknonlinearkalmanfilter (class in tfilterpy.state_estimation.nonlinear_filters)": [[1, "TFilterPy.state_estimation.nonlinear_filters.DaskNonLinearKalmanFilter", false]], "daskparticlefilter (class in tfilterpy)": [[0, "TFilterPy.DaskParticleFilter", false]], "daskparticlefilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskParticleFilter", false]], "daskparticlefilter (class in tfilterpy.state_estimation.particle_filters)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter", false]], "estimate_parameters() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.estimate_parameters", false]], "estimate_parameters() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.estimate_parameters", false]], "estimate_parameters() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.estimate_parameters", false]], "estimate_parameters() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_parameters", false]], "estimate_parameters() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_parameters", false]], "estimate_with_adaptive_filtering() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_adaptive_filtering", false]], "estimate_with_adaptive_filtering() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_adaptive_filtering", false]], "estimate_with_cross_validation() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_cross_validation", false]], "estimate_with_cross_validation() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_cross_validation", false]], "estimate_with_mle() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_mle", false]], "estimate_with_mle() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_mle", false]], "estimate_with_residual_analysis() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_residual_analysis", false]], "estimate_with_residual_analysis() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_residual_analysis", false]], "fit() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.fit", false]], "fit() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.fit", false]], "fit() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.fit", false]], "get_params() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.get_params", false]], "module": [[0, "module-TFilterPy", false], [0, "module-TFilterPy.base_estimator", false], [1, "module-TFilterPy.state_estimation", false], [1, "module-TFilterPy.state_estimation.linear_filters", false], [1, "module-TFilterPy.state_estimation.nonlinear_filters", false], [1, "module-TFilterPy.state_estimation.particle_filters", false], [2, "module-TFilterPy.utils", false], [2, "module-TFilterPy.utils.optimisation_utils", false]], "parameterestimator (class in tfilterpy.utils)": [[2, "TFilterPy.utils.ParameterEstimator", false]], "parameterestimator (class in tfilterpy.utils.optimisation_utils)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator", false]], "predict() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.predict", false]], "predict() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.predict", false]], "predict() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.predict", false]], "run_filter() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.run_filter", false]], "run_filter() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.run_filter", false]], "run_filter() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.run_filter", false]], "set_params() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.set_params", false]], "tfilterpy": [[0, "module-TFilterPy", false]], "tfilterpy.base_estimator": [[0, "module-TFilterPy.base_estimator", false]], "tfilterpy.state_estimation": [[1, "module-TFilterPy.state_estimation", false]], "tfilterpy.state_estimation.linear_filters": [[1, "module-TFilterPy.state_estimation.linear_filters", false]], "tfilterpy.state_estimation.nonlinear_filters": [[1, "module-TFilterPy.state_estimation.nonlinear_filters", false]], "tfilterpy.state_estimation.particle_filters": [[1, "module-TFilterPy.state_estimation.particle_filters", false]], "tfilterpy.utils": [[2, "module-TFilterPy.utils", false]], "tfilterpy.utils.optimisation_utils": [[2, "module-TFilterPy.utils.optimisation_utils", false]], "validate_matrices() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.validate_matrices", false]]}, "objects": {"": [[0, 0, 0, "-", "TFilterPy"]], "TFilterPy": [[0, 1, 1, "", "DaskKalmanFilter"], [0, 1, 1, "", "DaskNonLinearKalmanFilter"], [0, 1, 1, "", "DaskParticleFilter"], [0, 0, 0, "-", "base_estimator"], [1, 0, 0, "-", "state_estimation"], [2, 0, 0, "-", "utils"]], "TFilterPy.DaskKalmanFilter": [[0, 2, 1, "", "estimate_parameters"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "predict"], [0, 2, 1, "", "run_filter"]], "TFilterPy.base_estimator": [[0, 1, 1, "", "BaseEstimator"]], "TFilterPy.base_estimator.BaseEstimator": [[0, 2, 1, "", "get_params"], [0, 2, 1, "", "set_params"], [0, 2, 1, "", "validate_matrices"]], "TFilterPy.state_estimation": [[1, 1, 1, "", "DaskKalmanFilter"], [1, 1, 1, "", "DaskNonLinearKalmanFilter"], [1, 1, 1, "", "DaskParticleFilter"], [1, 0, 0, "-", "linear_filters"], [1, 0, 0, "-", "nonlinear_filters"], [1, 0, 0, "-", "particle_filters"]], "TFilterPy.state_estimation.DaskKalmanFilter": [[1, 2, 1, "", "estimate_parameters"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "run_filter"]], "TFilterPy.state_estimation.linear_filters": [[1, 1, 1, "", "DaskKalmanFilter"]], "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter": [[1, 2, 1, "", "estimate_parameters"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "run_filter"]], "TFilterPy.state_estimation.nonlinear_filters": [[1, 1, 1, "", "DaskNonLinearKalmanFilter"]], "TFilterPy.state_estimation.particle_filters": [[1, 1, 1, "", "DaskParticleFilter"]], "TFilterPy.utils": [[2, 1, 1, "", "ParameterEstimator"], [2, 0, 0, "-", "optimisation_utils"]], "TFilterPy.utils.ParameterEstimator": [[2, 2, 1, "", "estimate_parameters"], [2, 2, 1, "", "estimate_with_adaptive_filtering"], [2, 2, 1, "", "estimate_with_cross_validation"], [2, 2, 1, "", "estimate_with_mle"], [2, 2, 1, "", "estimate_with_residual_analysis"]], "TFilterPy.utils.optimisation_utils": [[2, 1, 1, "", "ParameterEstimator"]], "TFilterPy.utils.optimisation_utils.ParameterEstimator": [[2, 2, 1, "", "estimate_parameters"], [2, 2, 1, "", "estimate_with_adaptive_filtering"], [2, 2, 1, "", "estimate_with_cross_validation"], [2, 2, 1, "", "estimate_with_mle"], [2, 2, 1, "", "estimate_with_residual_analysis"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "terms": {"": 2, "1": 2, "1995": [0, 1, 2], "2": [0, 1], "2001": 2, "5": 2, "A": [0, 2], "If": [0, 1], "The": [0, 1, 2], "across": [0, 1], "adapt": [0, 1, 2], "adaptive_filt": [0, 1], "add": 3, "adjust": 2, "algorithm": [0, 1], "all": [0, 1], "alpha": 2, "an": [0, 1, 2], "analysi": [0, 1, 2], "analyz": 2, "appli": [0, 1], "appropri": [0, 1], "ar": [0, 1, 2], "arbitrari": 0, "argument": 0, "arrai": [0, 1, 2], "avail": [0, 1], "base": [0, 1, 2], "base_estim": 4, "baseestim": [0, 2, 4], "best": 2, "best_q": 2, "best_r": 2, "between": [0, 1, 2], "bishop": [0, 1, 2], "bool": 0, "call": [0, 1], "can": [0, 1], "chang": 2, "characterist": 2, "class": [0, 1, 2], "common": 0, "comput": [0, 1], "conform": [0, 1], "consist": 0, "construct": [0, 1], "contain": 1, "content": 4, "converg": 2, "covari": [0, 1, 2], "cross": [0, 1, 2], "cross_valid": [0, 1], "crucial": 2, "da": [0, 1, 2], "dask": [0, 1], "daskkalmanfilt": [0, 1, 4], "dasknonlinearkalmanfilt": [0, 1, 4], "daskparticlefilt": [0, 1, 4], "data": 2, "dataset": [0, 1], "deep": 0, "default": [0, 1, 2], "delai": [0, 1], "deriv": 2, "detail": 3, "determin": 2, "dict": 0, "dictionari": 0, "differ": [0, 1, 2], "dimens": [0, 1], "dimension": [0, 1], "discrep": 2, "distribut": [0, 1], "do": [0, 1], "dynam": [0, 1, 2], "each": [0, 1], "entir": [0, 1], "error": 2, "estim": [0, 1, 2], "estimate_paramet": [0, 1, 2, 4], "estimate_with_adaptive_filt": [0, 2], "estimate_with_cross_valid": [0, 2], "estimate_with_ml": [0, 2], "estimate_with_residual_analysi": [0, 2], "estimation_strategi": [0, 1, 2], "evolv": [0, 1], "execut": [0, 1], "extend": [0, 1], "f": [0, 1], "factor": 2, "filter": [0, 1, 2], "fit": [0, 1, 4], "fold": 2, "from": [0, 1, 2], "function": [0, 1, 2], "g": [0, 1, 2], "gain": [0, 1], "get": 0, "get_param": [0, 4], "graph": [0, 1], "h": [0, 1], "handl": 0, "have": 0, "haykin": 2, "how": [0, 1], "i": [0, 1, 2], "implement": [0, 1], "includ": [0, 1, 2], "incom": [0, 1], "inconsist": 0, "index": 3, "influenc": 2, "initi": [0, 1], "initial_covari": [0, 1], "initial_st": [0, 1], "innov": [0, 1, 2], "input": [0, 1], "instanc": [0, 1], "int": 2, "introduct": [0, 1, 2], "involv": 2, "iter": 2, "itself": 0, "k": [0, 1, 2], "k_fold": 2, "kalman": [0, 1, 2], "keyword": 0, "larg": [0, 1], "leverag": [0, 1], "likelihood": 2, "linear": [0, 1], "linear_filt": [0, 4], "lowest": 2, "made": [0, 1], "map": [0, 1], "matric": 0, "matrix": [0, 1, 2], "max_iter": 2, "maxim": 2, "maximum": 2, "measur": [0, 1, 2], "method": [0, 1, 2], "mle": [0, 1, 2], "model": 2, "modul": [3, 4], "multipl": [0, 1], "n_featur": [0, 1, 2], "n_observ": [0, 1], "n_timestep": [0, 1, 2], "name": 0, "ndarrai": [0, 1], "nest": 0, "network": 2, "neural": 2, "nois": [0, 1, 2], "noisi": [0, 1], "none": 0, "nonlinear": [0, 1], "nonlinear_filt": [0, 4], "note": [0, 1, 2], "np": [0, 1], "number": 2, "object": 0, "observ": [0, 1, 2], "observation_matrix": [0, 1], "observation_noise_cov": [0, 1], "one": [0, 1], "oper": [0, 1], "optim": 2, "optimisation_util": [0, 4], "option": [0, 1, 2], "over": [0, 1, 2], "p0": [0, 1], "packag": [3, 4], "page": 3, "parallel": [0, 1], "param": 0, "paramet": [0, 1, 2], "parameterestim": [0, 1, 2], "parent": [0, 1], "particl": [0, 1], "particle_filt": [0, 4], "particularli": 2, "perform": [0, 1, 2], "predict": [0, 1, 2, 4], "prepar": [0, 1], "process": [0, 1, 2], "process_noise_cov": [0, 1], "provid": 0, "python": 0, "q": [0, 1, 2], "r": [0, 1, 2], "rais": [0, 1], "recent": 2, "recurs": [0, 1], "refer": [0, 1, 2], "refin": 2, "remain": 2, "repeat": 2, "repres": [0, 1], "requir": [0, 1], "residu": [0, 1, 2], "residual_analysi": [0, 1, 2], "restructuredtext": 3, "retriev": 0, "return": [0, 1, 2], "run_filt": [0, 1, 4], "scale": [0, 1, 2], "search": 3, "see": 3, "self": [0, 1], "sequenc": [0, 1], "set": 0, "set_param": [0, 4], "shape": [0, 1, 2], "smooth": 2, "sourc": [0, 1, 2], "space": [0, 1], "specifi": [0, 1, 2], "split": 2, "state": [0, 1], "state_estim": [0, 4], "state_transition_matrix": [0, 1], "step": [0, 1], "store": [0, 1], "str": [0, 1, 2], "strategi": [0, 1, 2], "submodul": 4, "subpackag": 4, "support": [0, 1], "syntax": 3, "system": [0, 1, 2], "thi": [0, 1], "time": [0, 1, 2], "timelin": [0, 1], "toward": 2, "train": 2, "transit": [0, 1], "true": [0, 1], "tupl": [0, 1, 2], "two": [0, 1], "type": [0, 1], "uncertainti": [0, 1], "unknown": 2, "updat": [0, 1, 2], "us": [0, 1, 2, 3], "util": [0, 4], "valid": [0, 1, 2], "validate_matric": [0, 4], "valu": 0, "valueerror": [0, 1], "varianc": 2, "vector": [0, 1], "welch": [0, 1, 2], "where": 2, "while": [0, 1, 2], "x": [0, 1], "x0": [0, 1], "your": 3}, "titles": ["TFilterPy package", "TFilterPy.state_estimation package", "TFilterPy.utils package", "tfilters documentation", "TFilterPy"], "titleterms": {"": 3, "base_estim": 0, "content": [0, 1, 2, 3], "document": 3, "indic": 3, "linear_filt": 1, "modul": [0, 1, 2], "nonlinear_filt": 1, "optimisation_util": 2, "packag": [0, 1, 2], "particle_filt": 1, "state_estim": 1, "submodul": [0, 1, 2], "subpackag": 0, "tabl": 3, "tfilter": 3, "tfilterpi": [0, 1, 2, 3, 4], "util": 2, "welcom": 3}})